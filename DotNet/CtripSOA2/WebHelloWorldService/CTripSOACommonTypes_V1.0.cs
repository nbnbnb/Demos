//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.18444
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebHelloWorldService
{
    using System;
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System.Collections;
    using System.Xml.Schema;
    using System.ComponentModel;
    using System.Runtime.Serialization;
    using System.Collections.Generic;
    using CServiceStack.ProtoBuf;
    
    
    /// <summary>
    /// Check the health of the service. Per CTrip SOA policy,
    /// CheckHealth API must be implemented by service implementation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34234")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://soa.ctrip.com/common/types/v1")]
    [System.Xml.Serialization.XmlRootAttribute("CheckHealthRequest", Namespace="http://soa.ctrip.com/common/types/v1", IsNullable=false)]
    [DataContract(Name="CheckHealthRequest", Namespace="http://soa.ctrip.com/common/types/v1")]
    [ProtoContract()]
    public partial class CheckHealthRequestType
    {
    }
    
    /// <summary>
    /// The health status of the serivce. Per CTrip SOA policy,
    /// CheckHealth API must be implemented by service implementation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34234")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://soa.ctrip.com/common/types/v1")]
    [System.Xml.Serialization.XmlRootAttribute("CheckHealthResponse", Namespace="http://soa.ctrip.com/common/types/v1", IsNullable=false)]
    [DataContract(Name="CheckHealthResponse", Namespace="http://soa.ctrip.com/common/types/v1")]
    [ProtoContract()]
    public partial class CheckHealthResponseType
    {
        
        private ResponseStatusType responseStatusField;
        
        [DataMember()]
        [ProtoMember(1)]
        public ResponseStatusType ResponseStatus
        {
            get
            {
                return this.responseStatusField;
            }
            set
            {
                this.responseStatusField = value;
            }
        }
    }
    
    /// <summary>
    /// Response status type definition of a response payload. Per ctrip SOA policy, all
    /// concrete response types must include this response status type as a root element with element name 'ResponseStatus'.
    /// This is requreied for unified response status/error handling at framework level.
    /// The recommended naming convention we use for the concrete type names is the name
    /// of the service (the verb or call name) followed by "ResponseType": VerbNameResponseType
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34234")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://soa.ctrip.com/common/types/v1")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://soa.ctrip.com/common/types/v1", IsNullable=true)]
    [DataContract(Namespace="http://soa.ctrip.com/common/types/v1")]
    [ProtoContract()]
    public partial class ResponseStatusType
    {
        
        private System.DateTime timestampField;
        
        private AckCodeType ackField;
        
        private List<ErrorDataType> errorsField;
        
        private string buildField;
        
        private string versionField;
        
        private List<ExtensionType> extensionField;
        
        /// <summary>
        /// This value represents the date and time when a ctrip service processed the
        /// request. The value of this element is set by framework automatically,
        /// value set by serivce implementation will be overwritten.
        /// </summary>
        [DataMember()]
        [ProtoMember(1)]
        public System.DateTime Timestamp
        {
            get
            {
                return this.timestampField;
            }
            set
            {
                this.timestampField = value;
            }
        }
        
        /// <summary>
        /// Indicates whether the call was successfully processed by ctrip.
        /// </summary>
        [DataMember()]
        [ProtoMember(2)]
        public AckCodeType Ack
        {
            get
            {
                return this.ackField;
            }
            set
            {
                this.ackField = value;
            }
        }
        
        /// <summary>
        /// A list of framework, validation or service-level errors or warnings (if any) that were raised
        /// when a ctrip service processed the request.
        /// Only returned if there were warnings or errors.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("Errors")]
        [DataMember()]
        [ProtoMember(3)]
        public List<ErrorDataType> Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new List<ErrorDataType>();
                }
                return this.errorsField;
            }
            set
            {
                this.errorsField = value;
            }
        }
        
        /// <summary>
        /// This refers to the particular software build that ctrip service used when
        /// processing the request and generating the response. This includes the
        /// version number plus additional information.
        /// </summary>
        [DataMember()]
        [ProtoMember(4)]
        public string Build
        {
            get
            {
                return this.buildField;
            }
            set
            {
                this.buildField = value;
            }
        }
        
        /// <summary>
        /// The version of service used to process the request.
        /// </summary>
        [DataMember()]
        [ProtoMember(5)]
        public string Version
        {
            get
            {
                return this.versionField;
            }
            set
            {
                this.versionField = value;
            }
        }
        
        /// <summary>
        /// Reserved for future extension.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("Extension")]
        [DataMember()]
        [ProtoMember(6)]
        public List<ExtensionType> Extension
        {
            get
            {
                if ((this.extensionField == null))
                {
                    this.extensionField = new List<ExtensionType>();
                }
                return this.extensionField;
            }
            set
            {
                this.extensionField = value;
            }
        }
    }
    
    /// <summary>
    /// AckCodeType - Type declaration to be used by other schema. This code identifies
    /// the acknowledgement code types that ctrip could use to communicate the status of
    /// processing a (request) message to a client. This code would be used as part
    /// of a response message that contains a framework, validation or service-level
    /// acknowledgement element.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34234")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://soa.ctrip.com/common/types/v1")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://soa.ctrip.com/common/types/v1", IsNullable=false)]
    [DataContract(Namespace="http://soa.ctrip.com/common/types/v1")]
    [ProtoContract()]
    public enum AckCodeType
    {
        
        /// <summary>
        /// (out) Request processing succeeded
        /// </summary>
        [EnumMember()]
        [ProtoEnum()]
        Success,
        
        /// <summary>
        /// (out) Request processing failed
        /// </summary>
        [EnumMember()]
        [ProtoEnum()]
        Failure,
        
        /// <summary>
        /// (out) Request processing completed with warning information
        /// being included in the response message
        /// </summary>
        [EnumMember()]
        [ProtoEnum()]
        Warning,
        
        /// <summary>
        /// (out) Request processing completed with some failures.
        /// See the Errors data to determine which portions of the request failed.
        /// </summary>
        [EnumMember()]
        [ProtoEnum()]
        PartialFailure,
    }
    
    /// <summary>
    /// This is serivce, validation or framework-level error.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34234")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://soa.ctrip.com/common/types/v1")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://soa.ctrip.com/common/types/v1", IsNullable=true)]
    [DataContract(Namespace="http://soa.ctrip.com/common/types/v1")]
    [ProtoContract()]
    public partial class ErrorDataType
    {
        
        private string messageField;
        
        private string errorCodeField;
        
        private string stackTraceField;
        
        private SeverityCodeType severityCodeField;
        
        private List<ErrorFieldType> errorFieldsField;
        
        private ErrorClassificationCodeType errorClassificationField;
        
        /// <summary>
        /// A brief description of the condition that raised the error.
        /// </summary>
        [DataMember()]
        [ProtoMember(1)]
        public string Message
        {
            get
            {
                return this.messageField;
            }
            set
            {
                this.messageField = value;
            }
        }
        
        /// <summary>
        /// A unique code that identifies the particular error condition that occurred.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="token")]
        [DataMember()]
        [ProtoMember(2)]
        public string ErrorCode
        {
            get
            {
                return this.errorCodeField;
            }
            set
            {
                this.errorCodeField = value;
            }
        }
        
        /// <summary>
        /// StackTrace of exception causing this error, only used in debug mode.
        /// </summary>
        [DataMember()]
        [ProtoMember(3)]
        public string StackTrace
        {
            get
            {
                return this.stackTraceField;
            }
            set
            {
                this.stackTraceField = value;
            }
        }
        
        /// <summary>
        /// Indicates whether the reported problem is fatal (an error) or is less-
        /// severe (a warning). Review the error message details for information on
        /// the cause.
        /// </summary>
        [DataMember()]
        [ProtoMember(4)]
        public SeverityCodeType SeverityCode
        {
            get
            {
                return this.severityCodeField;
            }
            set
            {
                this.severityCodeField = value;
            }
        }
        
        /// <summary>
        /// Some warning and error messages return one or more variables that
        /// contain contextual information about the error. This is often the
        /// field or value that triggered the error.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("ErrorFields")]
        [DataMember()]
        [ProtoMember(5)]
        public List<ErrorFieldType> ErrorFields
        {
            get
            {
                if ((this.errorFieldsField == null))
                {
                    this.errorFieldsField = new List<ErrorFieldType>();
                }
                return this.errorFieldsField;
            }
            set
            {
                this.errorFieldsField = value;
            }
        }
        
        /// <summary>
        /// API errors are divided between three classes: service errors, validation errors and framework errors.
        /// </summary>
        [DataMember()]
        [ProtoMember(6)]
        public ErrorClassificationCodeType ErrorClassification
        {
            get
            {
                return this.errorClassificationField;
            }
            set
            {
                this.errorClassificationField = value;
            }
        }
    }
    
    /// <summary>
    /// SeverityCodeType - Type declaration to be used by other schema. This code
    /// identifies the severity of an API error. A code indicates whether there is an API-
    /// level error or warning that needs to be communicated to the client.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34234")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://soa.ctrip.com/common/types/v1")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://soa.ctrip.com/common/types/v1", IsNullable=false)]
    [DataContract(Namespace="http://soa.ctrip.com/common/types/v1")]
    [ProtoContract()]
    public enum SeverityCodeType
    {
        
        /// <summary>
        /// (out) The request that triggered the error was not processed
        /// successfully. When a serious framework, validation or service-level error occurs, the error
        /// is returned instead of the business data.
        /// </summary>
        [EnumMember()]
        [ProtoEnum()]
        Error,
        
        /// <summary>
        /// (out) The request was processed successfully, but something occurred
        /// that may affect your application or the user. For example, ctrip service may have
        /// changed a value the user sent in. In this case, ctrip service returns a normal,
        /// successful response and also returns the warning.
        /// </summary>
        [EnumMember()]
        [ProtoEnum()]
        Warning,
    }
    
    /// <summary>
    /// A variable that contains specific information about the context of this error.
    /// For example, in request validation failure case,
    /// the problematic field name might be returned as an error field.
    /// Use error fields to flag fields that users need to correct.
    /// Also use error fields to distinguish between errors when multiple
    /// errors are returned.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34234")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://soa.ctrip.com/common/types/v1")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://soa.ctrip.com/common/types/v1", IsNullable=true)]
    [DataContract(Namespace="http://soa.ctrip.com/common/types/v1")]
    [ProtoContract()]
    public partial class ErrorFieldType
    {
        
        private string fieldNameField;
        
        private string errorCodeField;
        
        private string messageField;
        
        /// <summary>
        /// The name of the field caused the error.
        /// </summary>
        [DataMember()]
        [ProtoMember(1)]
        public string FieldName
        {
            get
            {
                return this.fieldNameField;
            }
            set
            {
                this.fieldNameField = value;
            }
        }
        
        /// <summary>
        /// Error code
        /// </summary>
        [DataMember()]
        [ProtoMember(2)]
        public string ErrorCode
        {
            get
            {
                return this.errorCodeField;
            }
            set
            {
                this.errorCodeField = value;
            }
        }
        
        /// <summary>
        /// Error message
        /// </summary>
        [DataMember()]
        [ProtoMember(3)]
        public string Message
        {
            get
            {
                return this.messageField;
            }
            set
            {
                this.messageField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34234")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://soa.ctrip.com/common/types/v1")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://soa.ctrip.com/common/types/v1", IsNullable=false)]
    [DataContract(Namespace="http://soa.ctrip.com/common/types/v1")]
    [ProtoContract()]
    public enum ErrorClassificationCodeType
    {
        
        /// <summary>
        /// Indicates that an error has occurred in the service implementation, such as business logic error or other backend error.
        /// </summary>
        [EnumMember()]
        [ProtoEnum()]
        ServiceError,
        
        /// <summary>
        /// Indicates that an error has occurred because of framework-level request validation failure.
        /// This is usually because client consumer has attempted to submit invalid data (or missing data)
        /// in the request when making API call.
        /// </summary>
        [EnumMember()]
        [ProtoEnum()]
        ValidationError,
        
        /// <summary>
        /// Indicates that an error has occurred in the ctrip soa framework(CServiceStack), such as a serialization/descrialization failure.
        /// </summary>
        [EnumMember()]
        [ProtoEnum()]
        FrameworkError,
        
        /// <summary>
        /// Indicates that a ctrip service is unable to meet a specified service level agreement.
        /// typical cases that will cause this error including: 1) continues high service call latency;
        /// 2) continues high service call error rate, in these cases, to avoid further service deterioration,
        /// the service framework will enter into a self-protecting mode, by tripping the service call circuit
        /// and return SLAError to clients. Later, when the situation improves, the service framework will
        /// close the service call circuit again and continue to serve the clients.
        /// </summary>
        [EnumMember()]
        [ProtoEnum()]
        SLAError,
    }
    
    /// <summary>
    /// Reserved for future use.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34234")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://soa.ctrip.com/common/types/v1")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://soa.ctrip.com/common/types/v1", IsNullable=true)]
    [DataContract(Namespace="http://soa.ctrip.com/common/types/v1")]
    [ProtoContract()]
    public partial class ExtensionType
    {
        
        private string idField;
        
        private string versionField;
        
        private string contentTypeField;
        
        private string valueField;
        
        /// <summary>
        /// Reserved for future use.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(DataType="positiveInteger")]
        [DataMember()]
        [ProtoMember(1)]
        public string Id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idField = value;
            }
        }
        
        /// <summary>
        /// Reserved for future use.
        /// </summary>
        [DataMember()]
        [ProtoMember(2)]
        public string Version
        {
            get
            {
                return this.versionField;
            }
            set
            {
                this.versionField = value;
            }
        }
        
        /// <summary>
        /// Reserved for future use.
        /// </summary>
        [DataMember()]
        [ProtoMember(3)]
        public string ContentType
        {
            get
            {
                return this.contentTypeField;
            }
            set
            {
                this.contentTypeField = value;
            }
        }
        
        /// <summary>
        /// Reserved for future use.
        /// </summary>
        [DataMember()]
        [ProtoMember(4)]
        public string Value
        {
            get
            {
                return this.valueField;
            }
            set
            {
                this.valueField = value;
            }
        }
    }
    
    /// <summary>
    /// Common type definition of the request payload, concrete request types may choose to include this
    /// common type for optional versioning and output selecting requirements.
    /// The recommended naming convention we use for the concrete type names is the name
    /// of the service (the verb or call name) followed by "RequestType": VerbNameRequestType
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34234")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://soa.ctrip.com/common/types/v1")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://soa.ctrip.com/common/types/v1", IsNullable=true)]
    [DataContract(Namespace="http://soa.ctrip.com/common/types/v1")]
    [ProtoContract()]
    public partial class CommonRequestType
    {
        
        private string versionField;
        
        private List<string> outputSelectorField;
        
        /// <summary>
        /// The version number of the API code that you are
        /// programming against (e.g., 1.2.0). If not set, defaults to latest version.
        /// Whether and how this field is leveraged depends on specific service.
        /// </summary>
        [DataMember()]
        [ProtoMember(1)]
        public string Version
        {
            get
            {
                return this.versionField;
            }
            set
            {
                this.versionField = value;
            }
        }
        
        /// <summary>
        /// You can use the OutputSelector field to restrict the data returned by this call.
        /// When you make a call such as GetItem that retrieves data from ctrip service,
        /// the OutputSelector field is useful for restricting the data returned.
        /// This field makes the call response easier to use, especially when a large payload
        /// would be returned. If you use the OutputSelector field, the output data
        /// will include only the fields you specified in the request.
        /// For example, if you are using GetItem and you want the item data
        /// in the response to be restricted to the ViewItemURL
        /// (the URL where a user can view the listing) and BookItNowPrice, then
        /// within the GetItem request, specify those output fields.
        /// The output selecting logic is handled uniformly at SOA framework level.
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute("OutputSelector")]
        [DataMember()]
        [ProtoMember(2)]
        public List<string> OutputSelector
        {
            get
            {
                if ((this.outputSelectorField == null))
                {
                    this.outputSelectorField = new List<string>();
                }
                return this.outputSelectorField;
            }
            set
            {
                this.outputSelectorField = value;
            }
        }
    }
    
    /// <summary>
    /// Controls the pagination of the result set. Child elements specify the maximum
    /// number of items to return per call and which page of data to return.
    /// Controls which items are returned in the response, but does not control
    /// the details associated with the returned items.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34234")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://soa.ctrip.com/common/types/v1")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://soa.ctrip.com/common/types/v1", IsNullable=true)]
    [DataContract(Namespace="http://soa.ctrip.com/common/types/v1")]
    [ProtoContract()]
    public partial class PaginationInputType
    {
        
        private int pageNumberField;
        
        private int entriesPerPageField;
        
        /// <summary>
        /// Specifies which subset of data (or "page") to return in the call
        /// response. The number of data pages is determined by the total number of
        /// items matching the request search criteria (returned in
        /// paginationOutput.totalEntries) divided by the number of entries to
        /// display in each response (entriesPerPage). You can return max number of
        /// pages of the result set by issuing multiple requests and specifying,
        /// in sequence, the pages to return.
        /// Specify a positive value equal to or lower than the number of pages available (which you
        /// determine by examining the results of your initial request).
        /// </summary>
        [DataMember()]
        [ProtoMember(1)]
        public int PageNumber
        {
            get
            {
                return this.pageNumberField;
            }
            set
            {
                this.pageNumberField = value;
            }
        }
        
        /// <summary>
        /// Specifies the maximum number of entries to return in a single call. If
        /// the number of entries found on the specified pageNumber is less than the
        /// value specified here, the number of items returned will be less than the
        /// value of entriesPerPage. This indicates the end of the result set.
        /// </summary>
        [DataMember()]
        [ProtoMember(2)]
        public int EntriesPerPage
        {
            get
            {
                return this.entriesPerPageField;
            }
            set
            {
                this.entriesPerPageField = value;
            }
        }
    }
    
    /// <summary>
    /// Shows the pagination data for the item search. Child elements include the
    /// page number returned, the maximum entries returned per page, the total number
    /// of pages that can be returned, and the total number of items that match the
    /// search criteria.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34234")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://soa.ctrip.com/common/types/v1")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://soa.ctrip.com/common/types/v1", IsNullable=true)]
    [DataContract(Namespace="http://soa.ctrip.com/common/types/v1")]
    [ProtoContract()]
    public partial class PaginationOutputType
    {
        
        private int pageNumberField;
        
        private int entriesPerPageField;
        
        private int totalPagesField;
        
        private int totalEntriesField;
        
        /// <summary>
        /// The subset of item data returned in the current response. Search results
        /// are divided into sets, or "pages," of item data. The number of pages is
        /// equal to the total number of items matching the search criteria divided
        /// by the value specified for entriesPerPage in the request. The response
        /// for a request contains one "page" of item data.
        /// <br> <br>
        /// This returned value indicates the page number of item data returned (a
        /// subset of the complete result set). If this field contains 1, the
        /// response contains the first page of item data (the default). If the value
        /// returned in totalEntries is less than the value for entriesPerPage,
        /// pageNumber returns 1 and the response contains the entire result set.
        /// <br> <br>
        /// The value of pageNumber is normally equal to the value input for
        /// paginationInput.pageNumber. However, if the number input for pageNumber
        /// is greater than the total possible pages of output, ctrip returns the last
        /// page of item data in the result set, and the value for pageNumber is set
        /// to the respective (last) page number.
        /// </summary>
        [DataMember()]
        [ProtoMember(1)]
        public int PageNumber
        {
            get
            {
                return this.pageNumberField;
            }
            set
            {
                this.pageNumberField = value;
            }
        }
        
        /// <summary>
        /// The maximum number of items that can be returned in the response. This
        /// number is always equal to the value input for
        /// paginationInput.entriesPerPage.
        /// <br> <br>
        /// The end of the result set has been reached if the number specified for
        /// entriesPerPage is greater than the number of items found on the specified
        /// pageNumber. In this case, there will be fewer items returned than the
        /// number specified in entriesPerPage. This can be determined by comparing
        /// the entriesPerPage value with the value returned in the count attribute
        /// for the searchResult field.
        /// </summary>
        [DataMember()]
        [ProtoMember(2)]
        public int EntriesPerPage
        {
            get
            {
                return this.entriesPerPageField;
            }
            set
            {
                this.entriesPerPageField = value;
            }
        }
        
        /// <summary>
        /// The total number of pages of data that could be returned by repeated
        /// search requests. Note that if you modify the value of
        /// inputPagination.entriesPerPage in a request, the value output for
        /// totalPages will change. A value of "0" is returned if service does not find
        /// any items that match the search criteria.
        /// </summary>
        [DataMember()]
        [ProtoMember(3)]
        public int TotalPages
        {
            get
            {
                return this.totalPagesField;
            }
            set
            {
                this.totalPagesField = value;
            }
        }
        
        /// <summary>
        /// The total number of items found that match the search criteria in your
        /// request. Depending on the input value for entriesPerPage, the response
        /// might include only a portion (a page) of the entire result set. A value
        /// of "0" is returned if service does not find any items that match the search
        /// criteria.
        /// </summary>
        [DataMember()]
        [ProtoMember(4)]
        public int TotalEntries
        {
            get
            {
                return this.totalEntriesField;
            }
            set
            {
                this.totalEntriesField = value;
            }
        }
    }
    
    /// <summary>
    /// Generic error response container. Only used by CServiceStack framework internally.
    /// Please don't use this type in your service implementation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34234")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://soa.ctrip.com/common/types/v1")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://soa.ctrip.com/common/types/v1", IsNullable=true)]
    [DataContract(Namespace="http://soa.ctrip.com/common/types/v1")]
    [ProtoContract()]
    public partial class GenericErrorResponseType
    {
        
        private ResponseStatusType responseStatusField;
        
        [DataMember()]
        [ProtoMember(1)]
        public ResponseStatusType ResponseStatus
        {
            get
            {
                return this.responseStatusField;
            }
            set
            {
                this.responseStatusField = value;
            }
        }
    }
}
